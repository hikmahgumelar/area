pipeline{  
       agent   {  
          node {  
                 label 'docker' 
    
      }
   }
    environment {
        REGION="ap-southeast-1"
        CLUSTERNAME_DEV="DEV-IQOS-ID-SHOP"
        SERVICENAME_DEV="Dev-Area-Service"
        CLUSTERNAME_QA="QA-IQOS-ID-SHOP"
        SERVICENAME_QA="QA-Area-Service"
        CLUSTERNAME_PRD="PRD-IQOS-ID-SHOP"
        SERVICENAME_PRD="Prd-Area-Service"
        TAG_DEV="DEV"
        TAG_QA="QA"
        TAG_PRD="PRD"
        ECR_REPO_NAME="area"
        AWSCRED="iqos-id-ecr" 
        BUILD_IMAGE_NAME="042471448225.dkr.ecr.ap-southeast-1.amazonaws.com/${ECR_REPO_NAME}"
        ECRREPO="042471448225.dkr.ecr.ap-southeast-1.amazonaws.com/${ECR_REPO_NAME}"
        ECRURL="https://042471448225.dkr.ecr.ap-southeast-1.amazonaws.com"
        ECRCRED="ecr:${REGION}:${AWSCRED}"
        GIT_AUTH="hgumelar"
            
    }
    stages {
        stage('Unit Test'){
            steps{
                echo "Run Unit Test"
                // checkout scm
                //// script{
                    // dockImage = docker.build("${ECR_REPO_NAME}:${env.BUILD_ID}")
                // }
            }
        }
        stage('Docker Build'){
            steps{
                checkout scm
                script{

                    echo "docker build"
                    dockImage = docker.build("${ECR_REPO_NAME}:${env.BUILD_ID}")
                }
            }
        }
        stage('Push Images to ECR'){
                parallel{
                                        stage('Push image to ECR and create tag DEV') {
                                            when {
                                                branch 'development'
                                            }
                                            steps{
                                                script{
                                                        echo "Start Push Image to ECR and tag Image with DEV"
                                                            docker.withRegistry(ECRURL, ECRCRED){
                                                                    dockImage.push()
                                                                    dockImage.push(TAG_DEV)
                                                                    }
                                                                    echo "End Push Image with TAG_DEV"            
                                                                }
                                                            }
                                                        }
                                        stage('Push image to ECR, create tag QA') {
                                            when {
                                                branch 'QA'
                                            }
                                            steps{
                                                script{ 
                                                        echo "Start Push Image to ECR and tag Image with QA"
                                                            docker.withRegistry(ECRURL, ECRCRED){
                                                                    dockImage.push()
                                                                    dockImage.push(TAG_QA)
                                                                    }
                                                                    echo "End Push Image with TAG TAG_PRD"            
                                                                }
                                                            }
                                                        }
                                        stage('Push image to ECR, create tag PRD') {
                                            when {
                                                branch 'Master'
                                            }
                                            steps{
                                                script{
                                                        echo "Start Push Image to ECR and tag Image with PRD"
                                                            docker.withRegistry(ECRURL, ECRCRED){
                                                                    dockImage.push()
                                                                    dockImage.push(TAG_PRD)
                                                                    }
                                                                    echo "End Push Image with TAG TAG_QA"            
                                                                }
                                                            }
                                                        }
                }                           
        }     
        stage('Deployment to AWS ECS'){ 
            agent {
                docker { 
                    image 'python:3.7.3-stretch'
                    label 'docker'
                    args '-u root:root' }
            }
            stages{
                stage('Prepare AWS CLI'){
                    steps {
                        withCredentials(
                        [[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            credentialsId: AWSCRED,  
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]){
                            sh 'pip3 install awscli'
                            sh 'aws configure --profile ${ECR_REPO_NAME} set aws_access_key_id ${AWS_ACCESS_KEY_ID}'
                            sh 'aws configure --profile ${ECR_REPO_NAME} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}'
                            sh 'aws configure --profile ${ECR_REPO_NAME} set region ${REGION}'
                            

                        }
                    }
                }
        stage('Deploy Service'){               
            parallel{
                        stage('Deploy ECS DEV '){
                            when{
                                branch 'development'
                            }
                            steps{
                                echo "Update Service ECS DEV"
                               sh 'aws ecs --profile ${ECR_REPO_NAME} update-service --cluster ${CLUSTERNAME_DEV} --service ${SERVICENAME_DEV} --force-new-deployment'
                            }
                        }
                        stage('Deploy ECS QA '){
                            when{
                                branch 'QA'
                            }
                            steps{
                                echo "Update Service ECS QA"
                                sh 'aws ecs --profile ${ECR_REPO_NAME} update-service --cluster ${CLUSTERNAME_QA} --service ${SERVICENAME_QA} --force-new-deployment'
                            }
                        
                        }
                        stage('Deploy ECS PRD '){
                            when{
                                branch 'Master'
                            }
                            steps{
                                echo "Update Service ECS PRD"
                                sh 'aws ecs --profile ${ECR_REPO_NAME} update-service --cluster ${CLUSTERNAME_PRD} --service ${SERVICENAME_PRD} --force-new-deployment'
                            }
                        
                        }
           }
        }
        
              stage ('Run Katalon Integration Test'){
                steps {
                    script{
                           echo 'To be defined once the SCM is connected'
                          // checkout scm
                          // def testImage = docker.build("test-image", "./dockerfiles/test") 
                          // testImage.inside {
                          //     sh 'make test'
                          // }
                          // docker.image('my-custom-image').inside {
                          //     sh 'make test'
                          // }
                          }
                      }        
                 }
              
              stage('Done'){
                steps {
                    script{
                                echo "Done"

                             }
                           }
                
         }
      } 
        
   
   }
}
}
    
       
     
